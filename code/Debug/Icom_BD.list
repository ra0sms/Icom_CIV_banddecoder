
Icom_BD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e60  08002e60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e60  08002e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  08002e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08002e74  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075c5  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d39  00000000  00000000  0002763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  00029378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071c  00000000  00000000  00029d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001619e  00000000  00000000  0002a42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bd1  00000000  00000000  000405ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082fef  00000000  00000000  0004a19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002088  00000000  00000000  000cd18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cf214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002d60 	.word	0x08002d60

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002d60 	.word	0x08002d60

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	0002      	movs	r2, r0
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b7f      	cmp	r3, #127	; 0x7f
 800022a:	d809      	bhi.n	8000240 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <__NVIC_EnableIRQ+0x30>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d828      	bhi.n	80002b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <__NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	b25b      	sxtb	r3, r3
 800026a:	089b      	lsrs	r3, r3, #2
 800026c:	33c0      	adds	r3, #192	; 0xc0
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	589b      	ldr	r3, [r3, r2]
 8000272:	1dfa      	adds	r2, r7, #7
 8000274:	7812      	ldrb	r2, [r2, #0]
 8000276:	0011      	movs	r1, r2
 8000278:	2203      	movs	r2, #3
 800027a:	400a      	ands	r2, r1
 800027c:	00d2      	lsls	r2, r2, #3
 800027e:	21ff      	movs	r1, #255	; 0xff
 8000280:	4091      	lsls	r1, r2
 8000282:	000a      	movs	r2, r1
 8000284:	43d2      	mvns	r2, r2
 8000286:	401a      	ands	r2, r3
 8000288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	019b      	lsls	r3, r3, #6
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	401a      	ands	r2, r3
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	0018      	movs	r0, r3
 8000298:	2303      	movs	r3, #3
 800029a:	4003      	ands	r3, r0
 800029c:	00db      	lsls	r3, r3, #3
 800029e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a0:	481f      	ldr	r0, [pc, #124]	; (8000320 <__NVIC_SetPriority+0xd4>)
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	430a      	orrs	r2, r1
 80002ac:	33c0      	adds	r3, #192	; 0xc0
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b2:	e031      	b.n	8000318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <__NVIC_SetPriority+0xd8>)
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0019      	movs	r1, r3
 80002bc:	230f      	movs	r3, #15
 80002be:	400b      	ands	r3, r1
 80002c0:	3b08      	subs	r3, #8
 80002c2:	089b      	lsrs	r3, r3, #2
 80002c4:	3306      	adds	r3, #6
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	18d3      	adds	r3, r2, r3
 80002ca:	3304      	adds	r3, #4
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1dfa      	adds	r2, r7, #7
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	0011      	movs	r1, r2
 80002d4:	2203      	movs	r2, #3
 80002d6:	400a      	ands	r2, r1
 80002d8:	00d2      	lsls	r2, r2, #3
 80002da:	21ff      	movs	r1, #255	; 0xff
 80002dc:	4091      	lsls	r1, r2
 80002de:	000a      	movs	r2, r1
 80002e0:	43d2      	mvns	r2, r2
 80002e2:	401a      	ands	r2, r3
 80002e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	019b      	lsls	r3, r3, #6
 80002ea:	22ff      	movs	r2, #255	; 0xff
 80002ec:	401a      	ands	r2, r3
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	0018      	movs	r0, r3
 80002f4:	2303      	movs	r3, #3
 80002f6:	4003      	ands	r3, r0
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	4809      	ldr	r0, [pc, #36]	; (8000324 <__NVIC_SetPriority+0xd8>)
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	001c      	movs	r4, r3
 8000304:	230f      	movs	r3, #15
 8000306:	4023      	ands	r3, r4
 8000308:	3b08      	subs	r3, #8
 800030a:	089b      	lsrs	r3, r3, #2
 800030c:	430a      	orrs	r2, r1
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18c3      	adds	r3, r0, r3
 8000314:	3304      	adds	r3, #4
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000e100 	.word	0xe000e100
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2280      	movs	r2, #128	; 0x80
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}

08000360 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	2201      	movs	r2, #1
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b002      	add	sp, #8
 800037a:	bd80      	pop	{r7, pc}

0800037c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2201      	movs	r2, #1
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b002      	add	sp, #8
 8000396:	bd80      	pop	{r7, pc}

08000398 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <LL_USART_DisableFIFO+0x1c>)
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	dfffffff 	.word	0xdfffffff

080003b8 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003c2:	f3ef 8310 	mrs	r3, PRIMASK
 80003c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	2301      	movs	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f383 8810 	msr	PRIMASK, r3
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	08da      	lsrs	r2, r3, #3
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	075b      	lsls	r3, r3, #29
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	f383 8810 	msr	PRIMASK, r3
}
 80003f4:	46c0      	nop			; (mov r8, r8)
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b006      	add	sp, #24
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800040a:	f3ef 8310 	mrs	r3, PRIMASK
 800040e:	60bb      	str	r3, [r7, #8]
  return(result);
 8000410:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	2301      	movs	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f383 8810 	msr	PRIMASK, r3
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <LL_USART_SetRXFIFOThreshold+0x48>)
 8000426:	401a      	ands	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	065b      	lsls	r3, r3, #25
 800042c:	431a      	orrs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	f383 8810 	msr	PRIMASK, r3
}
 800043c:	46c0      	nop			; (mov r8, r8)
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b006      	add	sp, #24
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	f1ffffff 	.word	0xf1ffffff

0800044c <LL_USART_ConfigHalfDuplexMode>:
  *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* In Half Duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <LL_USART_ConfigHalfDuplexMode+0x38>)
 800045a:	401a      	ands	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	2222      	movs	r2, #34	; 0x22
 8000466:	4393      	bics	r3, r2
 8000468:	001a      	movs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	609a      	str	r2, [r3, #8]
  /* set the UART/USART in Half Duplex mode */
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	2208      	movs	r2, #8
 8000474:	431a      	orrs	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	609a      	str	r2, [r3, #8]
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	ffffb7ff 	.word	0xffffb7ff

08000488 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	039b      	lsls	r3, r3, #14
 8000498:	401a      	ands	r2, r3
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	039b      	lsls	r3, r3, #14
 800049e:	429a      	cmp	r2, r3
 80004a0:	d101      	bne.n	80004a6 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80004a2:	2301      	movs	r3, #1
 80004a4:	e000      	b.n	80004a8 <LL_USART_IsActiveFlag_TEACK+0x20>
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	03db      	lsls	r3, r3, #15
 80004c0:	401a      	ands	r2, r3
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	03db      	lsls	r3, r3, #15
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d101      	bne.n	80004ce <LL_USART_IsActiveFlag_REACK+0x1e>
 80004ca:	2301      	movs	r3, #1
 80004cc:	e000      	b.n	80004d0 <LL_USART_IsActiveFlag_REACK+0x20>
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004e0:	f3ef 8310 	mrs	r3, PRIMASK
 80004e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80004e6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	2301      	movs	r3, #1
 80004ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f383 8810 	msr	PRIMASK, r3
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2220      	movs	r2, #32
 80004fc:	431a      	orrs	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	f383 8810 	msr	PRIMASK, r3
}
 800050c:	46c0      	nop			; (mov r8, r8)
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b006      	add	sp, #24
 8000514:	bd80      	pop	{r7, pc}

08000516 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	4013      	ands	r3, r2
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d101      	bne.n	8000532 <LL_GPIO_IsInputPinSet+0x1c>
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <LL_GPIO_IsInputPinSet+0x1e>
 8000532:	2300      	movs	r3, #0
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}

0800053c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	619a      	str	r2, [r3, #24]
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_APB2_GRP1_EnableClock+0x28>)
 8000576:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_APB2_GRP1_EnableClock+0x28>)
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	430a      	orrs	r2, r1
 800057e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_APB2_GRP1_EnableClock+0x28>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80005ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4013      	ands	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000

080005c4 <ResetOuts>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

void ResetOuts() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(BAND1_GPIO_Port, BAND1_Pin);
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2101      	movs	r1, #1
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ffc0 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND2_GPIO_Port, BAND2_Pin);
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2102      	movs	r1, #2
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ffba 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND3_GPIO_Port, BAND3_Pin);
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2104      	movs	r1, #4
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ffb4 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND4_GPIO_Port, BAND4_Pin);
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2108      	movs	r1, #8
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ffae 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND5_GPIO_Port, BAND5_Pin);
 80005f8:	23a0      	movs	r3, #160	; 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	2110      	movs	r1, #16
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ffa8 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND6_GPIO_Port, BAND6_Pin);
 8000604:	23a0      	movs	r3, #160	; 0xa0
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ffa2 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND7_GPIO_Port, BAND7_Pin);
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff9c 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND8_GPIO_Port, BAND8_Pin);
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff ff96 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND9_GPIO_Port, BAND9_Pin);
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <ResetOuts+0x80>)
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff91 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BAND10_GPIO_Port, BAND10_Pin);
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ResetOuts+0x80>)
 8000634:	2102      	movs	r1, #2
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff ff8c 	bl	8000554 <LL_GPIO_ResetOutputPin>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	50000400 	.word	0x50000400

08000648 <ResetLeds>:


void ResetLeds() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	011a      	lsls	r2, r3, #4
 8000650:	23a0      	movs	r3, #160	; 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff7c 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	015a      	lsls	r2, r3, #5
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff74 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	021a      	lsls	r2, r3, #8
 8000670:	23a0      	movs	r3, #160	; 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f7ff ff6c 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <ResetLeds+0x88>)
 800067e:	2108      	movs	r1, #8
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ff67 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <ResetLeds+0x88>)
 8000688:	2110      	movs	r1, #16
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff ff62 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <ResetLeds+0x88>)
 8000692:	2120      	movs	r1, #32
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ff5d 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <ResetLeds+0x88>)
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff58 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED8_GPIO_Port, LED8_Pin);
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <ResetLeds+0x88>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff ff53 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED9_GPIO_Port, LED9_Pin);
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <ResetLeds+0x88>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f7ff ff4c 	bl	8000554 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(LED10_GPIO_Port, LED10_Pin);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <ResetLeds+0x88>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f7ff ff45 	bl	8000554 <LL_GPIO_ResetOutputPin>
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	50000400 	.word	0x50000400

080006d4 <SetBand>:

void SetBand(int x){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	ResetOuts();
 80006dc:	f7ff ff72 	bl	80005c4 <ResetOuts>
	switch (x){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b0a      	cmp	r3, #10
 80006e4:	d849      	bhi.n	800077a <SetBand+0xa6>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	009a      	lsls	r2, r3, #2
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SetBand+0xb0>)
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	469f      	mov	pc, r3
	case 1: LL_GPIO_SetOutputPin(BAND1_GPIO_Port, BAND1_Pin); break;
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2101      	movs	r1, #1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ff1f 	bl	800053c <LL_GPIO_SetOutputPin>
 80006fe:	e03c      	b.n	800077a <SetBand+0xa6>
	case 2: LL_GPIO_SetOutputPin(BAND2_GPIO_Port, BAND2_Pin); break;
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff18 	bl	800053c <LL_GPIO_SetOutputPin>
 800070c:	e035      	b.n	800077a <SetBand+0xa6>
	case 3: LL_GPIO_SetOutputPin(BAND3_GPIO_Port, BAND3_Pin); break;
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2104      	movs	r1, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff11 	bl	800053c <LL_GPIO_SetOutputPin>
 800071a:	e02e      	b.n	800077a <SetBand+0xa6>
	case 4: LL_GPIO_SetOutputPin(BAND4_GPIO_Port, BAND4_Pin); break;
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2108      	movs	r1, #8
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff ff0a 	bl	800053c <LL_GPIO_SetOutputPin>
 8000728:	e027      	b.n	800077a <SetBand+0xa6>
	case 5: LL_GPIO_SetOutputPin(BAND5_GPIO_Port, BAND5_Pin); break;
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2110      	movs	r1, #16
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ff03 	bl	800053c <LL_GPIO_SetOutputPin>
 8000736:	e020      	b.n	800077a <SetBand+0xa6>
	case 6: LL_GPIO_SetOutputPin(BAND6_GPIO_Port, BAND6_Pin); break;
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2120      	movs	r1, #32
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fefc 	bl	800053c <LL_GPIO_SetOutputPin>
 8000744:	e019      	b.n	800077a <SetBand+0xa6>
	case 7: LL_GPIO_SetOutputPin(BAND7_GPIO_Port, BAND7_Pin); break;
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fef5 	bl	800053c <LL_GPIO_SetOutputPin>
 8000752:	e012      	b.n	800077a <SetBand+0xa6>
	case 8: LL_GPIO_SetOutputPin(BAND8_GPIO_Port, BAND8_Pin); break;
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff feee 	bl	800053c <LL_GPIO_SetOutputPin>
 8000760:	e00b      	b.n	800077a <SetBand+0xa6>
	case 9: LL_GPIO_SetOutputPin(BAND9_GPIO_Port, BAND9_Pin); break;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <SetBand+0xb4>)
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fee8 	bl	800053c <LL_GPIO_SetOutputPin>
 800076c:	e005      	b.n	800077a <SetBand+0xa6>
	case 10: LL_GPIO_SetOutputPin(BAND10_GPIO_Port, BAND10_Pin); break;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <SetBand+0xb4>)
 8000770:	2102      	movs	r1, #2
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff fee2 	bl	800053c <LL_GPIO_SetOutputPin>
 8000778:	46c0      	nop			; (mov r8, r8)
	}
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	08002d78 	.word	0x08002d78
 8000788:	50000400 	.word	0x50000400

0800078c <SetLed>:

void SetLed(int x){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	ResetLeds();
 8000794:	f7ff ff58 	bl	8000648 <ResetLeds>
	switch (x){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d84e      	bhi.n	800083c <SetLed+0xb0>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SetLed+0xb8>)
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	469f      	mov	pc, r3
	case 1: LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin); break;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	011a      	lsls	r2, r3, #4
 80007ae:	23a0      	movs	r3, #160	; 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fec1 	bl	800053c <LL_GPIO_SetOutputPin>
 80007ba:	e03f      	b.n	800083c <SetLed+0xb0>
	case 2: LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin); break;
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	015a      	lsls	r2, r3, #5
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff feb8 	bl	800053c <LL_GPIO_SetOutputPin>
 80007cc:	e036      	b.n	800083c <SetLed+0xb0>
	case 3: LL_GPIO_SetOutputPin(LED3_GPIO_Port, LED3_Pin); break;
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	021a      	lsls	r2, r3, #8
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff feaf 	bl	800053c <LL_GPIO_SetOutputPin>
 80007de:	e02d      	b.n	800083c <SetLed+0xb0>
	case 4: LL_GPIO_SetOutputPin(LED4_GPIO_Port, LED4_Pin); break;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SetLed+0xbc>)
 80007e2:	2108      	movs	r1, #8
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fea9 	bl	800053c <LL_GPIO_SetOutputPin>
 80007ea:	e027      	b.n	800083c <SetLed+0xb0>
	case 5: LL_GPIO_SetOutputPin(LED5_GPIO_Port, LED5_Pin); break;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <SetLed+0xbc>)
 80007ee:	2110      	movs	r1, #16
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fea3 	bl	800053c <LL_GPIO_SetOutputPin>
 80007f6:	e021      	b.n	800083c <SetLed+0xb0>
	case 6: LL_GPIO_SetOutputPin(LED6_GPIO_Port, LED6_Pin); break;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <SetLed+0xbc>)
 80007fa:	2120      	movs	r1, #32
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fe9d 	bl	800053c <LL_GPIO_SetOutputPin>
 8000802:	e01b      	b.n	800083c <SetLed+0xb0>
	case 7: LL_GPIO_SetOutputPin(LED7_GPIO_Port, LED7_Pin); break;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <SetLed+0xbc>)
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fe97 	bl	800053c <LL_GPIO_SetOutputPin>
 800080e:	e015      	b.n	800083c <SetLed+0xb0>
	case 8: LL_GPIO_SetOutputPin(LED8_GPIO_Port, LED8_Pin); break;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <SetLed+0xbc>)
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fe91 	bl	800053c <LL_GPIO_SetOutputPin>
 800081a:	e00f      	b.n	800083c <SetLed+0xb0>
	case 9: LL_GPIO_SetOutputPin(LED9_GPIO_Port, LED9_Pin); break;
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4a09      	ldr	r2, [pc, #36]	; (8000848 <SetLed+0xbc>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f7ff fe89 	bl	800053c <LL_GPIO_SetOutputPin>
 800082a:	e007      	b.n	800083c <SetLed+0xb0>
	case 10: LL_GPIO_SetOutputPin(LED10_GPIO_Port, LED10_Pin); break;
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <SetLed+0xbc>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f7ff fe81 	bl	800053c <LL_GPIO_SetOutputPin>
 800083a:	46c0      	nop			; (mov r8, r8)
	}
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08002da4 	.word	0x08002da4
 8000848:	50000400 	.word	0x50000400

0800084c <SetMode>:

void SetMode() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if (flag_mode == 'C') {
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SetMode+0x9c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b43      	cmp	r3, #67	; 0x43
 8000856:	d113      	bne.n	8000880 <SetMode+0x34>
		LL_GPIO_SetOutputPin(OUT_CW_GPIO_Port, OUT_CW_Pin);
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <SetMode+0xa0>)
 800085a:	2104      	movs	r1, #4
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fe6d 	bl	800053c <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(OUT_SSB_GPIO_Port, OUT_SSB_Pin);
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	005a      	lsls	r2, r3, #1
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff fe71 	bl	8000554 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(LED_CW_GPIO_Port, LED_CW_Pin);
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	01db      	lsls	r3, r3, #7
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <SetMode+0xa4>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f7ff fe6a 	bl	8000554 <LL_GPIO_ResetOutputPin>
	}
	if (flag_mode == 'P') {
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <SetMode+0x9c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b50      	cmp	r3, #80	; 0x50
 8000886:	d113      	bne.n	80008b0 <SetMode+0x64>
		LL_GPIO_ResetOutputPin(OUT_CW_GPIO_Port, OUT_CW_Pin);
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <SetMode+0xa0>)
 800088a:	2104      	movs	r1, #4
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fe61 	bl	8000554 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(OUT_SSB_GPIO_Port, OUT_SSB_Pin);
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	005a      	lsls	r2, r3, #1
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fe4d 	bl	800053c <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_CW_GPIO_Port, LED_CW_Pin);
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <SetMode+0xa4>)
 80008a8:	0019      	movs	r1, r3
 80008aa:	0010      	movs	r0, r2
 80008ac:	f7ff fe46 	bl	800053c <LL_GPIO_SetOutputPin>
	}
	if (flag_mode == 0) {
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <SetMode+0x9c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d113      	bne.n	80008e0 <SetMode+0x94>
		LL_GPIO_ResetOutputPin(OUT_CW_GPIO_Port, OUT_CW_Pin);
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SetMode+0xa0>)
 80008ba:	2104      	movs	r1, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe49 	bl	8000554 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(OUT_SSB_GPIO_Port, OUT_SSB_Pin);
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	005a      	lsls	r2, r3, #1
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fe41 	bl	8000554 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(LED_CW_GPIO_Port, LED_CW_Pin);
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	01db      	lsls	r3, r3, #7
 80008d6:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <SetMode+0xa4>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f7ff fe3a 	bl	8000554 <LL_GPIO_ResetOutputPin>
	}
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000003c 	.word	0x2000003c
 80008ec:	50000400 	.word	0x50000400
 80008f0:	50000800 	.word	0x50000800

080008f4 <SetOut>:

void SetOut(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if (flag_band == 160) {
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <SetOut+0xe4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2ba0      	cmp	r3, #160	; 0xa0
 80008fe:	d105      	bne.n	800090c <SetOut+0x18>
		SetLed(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff ff43 	bl	800078c <SetLed>
		SetBand(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fee4 	bl	80006d4 <SetBand>
	}
	if (flag_band == 80) {
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <SetOut+0xe4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b50      	cmp	r3, #80	; 0x50
 8000912:	d105      	bne.n	8000920 <SetOut+0x2c>
		SetLed(2);
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff ff39 	bl	800078c <SetLed>
		SetBand(2);
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff feda 	bl	80006d4 <SetBand>
	}
	if (flag_band == 40) {
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <SetOut+0xe4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b28      	cmp	r3, #40	; 0x28
 8000926:	d105      	bne.n	8000934 <SetOut+0x40>
		SetLed(3);
 8000928:	2003      	movs	r0, #3
 800092a:	f7ff ff2f 	bl	800078c <SetLed>
		SetBand(3);
 800092e:	2003      	movs	r0, #3
 8000930:	f7ff fed0 	bl	80006d4 <SetBand>
	}
	if (flag_band == 30) {
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <SetOut+0xe4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b1e      	cmp	r3, #30
 800093a:	d105      	bne.n	8000948 <SetOut+0x54>
		SetLed(4);
 800093c:	2004      	movs	r0, #4
 800093e:	f7ff ff25 	bl	800078c <SetLed>
		SetBand(4);
 8000942:	2004      	movs	r0, #4
 8000944:	f7ff fec6 	bl	80006d4 <SetBand>
	}
	if (flag_band == 20) {
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <SetOut+0xe4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b14      	cmp	r3, #20
 800094e:	d105      	bne.n	800095c <SetOut+0x68>
		SetLed(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f7ff ff1b 	bl	800078c <SetLed>
		SetBand(5);
 8000956:	2005      	movs	r0, #5
 8000958:	f7ff febc 	bl	80006d4 <SetBand>
	}
	if (flag_band == 17) {
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <SetOut+0xe4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b11      	cmp	r3, #17
 8000962:	d105      	bne.n	8000970 <SetOut+0x7c>
		SetLed(6);
 8000964:	2006      	movs	r0, #6
 8000966:	f7ff ff11 	bl	800078c <SetLed>
		SetBand(6);
 800096a:	2006      	movs	r0, #6
 800096c:	f7ff feb2 	bl	80006d4 <SetBand>
	}
	if (flag_band == 15) {
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <SetOut+0xe4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d105      	bne.n	8000984 <SetOut+0x90>
		SetLed(7);
 8000978:	2007      	movs	r0, #7
 800097a:	f7ff ff07 	bl	800078c <SetLed>
		SetBand(7);
 800097e:	2007      	movs	r0, #7
 8000980:	f7ff fea8 	bl	80006d4 <SetBand>
	}
	if (flag_band == 12) {
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SetOut+0xe4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b0c      	cmp	r3, #12
 800098a:	d105      	bne.n	8000998 <SetOut+0xa4>
		SetLed(8);
 800098c:	2008      	movs	r0, #8
 800098e:	f7ff fefd 	bl	800078c <SetLed>
		SetBand(8);
 8000992:	2008      	movs	r0, #8
 8000994:	f7ff fe9e 	bl	80006d4 <SetBand>
	}
	if (flag_band == 10) {
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <SetOut+0xe4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b0a      	cmp	r3, #10
 800099e:	d105      	bne.n	80009ac <SetOut+0xb8>
		SetLed(9);
 80009a0:	2009      	movs	r0, #9
 80009a2:	f7ff fef3 	bl	800078c <SetLed>
		SetBand(9);
 80009a6:	2009      	movs	r0, #9
 80009a8:	f7ff fe94 	bl	80006d4 <SetBand>
	}
	if (flag_band == 6) {
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <SetOut+0xe4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	d105      	bne.n	80009c0 <SetOut+0xcc>
		SetLed(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f7ff fee9 	bl	800078c <SetLed>
		SetBand(10);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f7ff fe8a 	bl	80006d4 <SetBand>
	}
	if (flag_band == 0) {
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SetOut+0xe4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <SetOut+0xdc>
		ResetLeds();
 80009c8:	f7ff fe3e 	bl	8000648 <ResetLeds>
		ResetOuts();
 80009cc:	f7ff fdfa 	bl	80005c4 <ResetOuts>
	}

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000038 	.word	0x20000038

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fddc 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f828 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f000 f952 	bl	8000c90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009ec:	f000 f8b6 	bl	8000b5c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80009f0:	f000 f87e 	bl	8000af0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM14);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <main+0x50>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fc96 	bl	8000328 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM14);
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <main+0x50>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fcae 	bl	8000360 <LL_TIM_EnableIT_UPDATE>
  LL_USART_EnableIT_RXNE(USART1);
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <main+0x54>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fd66 	bl	80004d8 <LL_USART_EnableIT_RXNE_RXFNE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (LL_GPIO_IsInputPinSet(BTN_STOP_GPIO_Port, BTN_STOP_Pin) == 1) {
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <main+0x58>)
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fd80 	bl	8000516 <LL_GPIO_IsInputPinSet>
 8000a16:	0003      	movs	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d103      	bne.n	8000a24 <main+0x48>
			SetOut();
 8000a1c:	f7ff ff6a 	bl	80008f4 <SetOut>
			SetMode();
 8000a20:	f7ff ff14 	bl	800084c <SetMode>
		}
		LL_mDelay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f002 f94b 	bl	8002cc0 <LL_mDelay>
		if (LL_GPIO_IsInputPinSet(BTN_STOP_GPIO_Port, BTN_STOP_Pin) == 1) {
 8000a2a:	e7ef      	b.n	8000a0c <main+0x30>
 8000a2c:	40002000 	.word	0x40002000
 8000a30:	40013800 	.word	0x40013800
 8000a34:	50000800 	.word	0x50000800

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b093      	sub	sp, #76	; 0x4c
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	2414      	movs	r4, #20
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	0018      	movs	r0, r3
 8000a44:	2334      	movs	r3, #52	; 0x34
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f002 f95d 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	0018      	movs	r0, r3
 8000a52:	2310      	movs	r3, #16
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f002 f956 	bl	8002d08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fed5 	bl	8001810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2202      	movs	r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0052      	lsls	r2, r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a74:	0021      	movs	r1, r4
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2208      	movs	r2, #8
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0292      	lsls	r2, r2, #10
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	0592      	lsls	r2, r2, #22
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 feef 	bl	8001890 <HAL_RCC_OscConfig>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ab6:	f000 fbb9 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 f9e9 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ae2:	f000 fba3 	bl	800122c <Error_Handler>
  }
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b013      	add	sp, #76	; 0x4c
 8000aec:	bd90      	pop	{r4, r7, pc}
	...

08000af0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	0018      	movs	r0, r3
 8000afa:	2314      	movs	r3, #20
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f002 f902 	bl	8002d08 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM14);
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fd2f 	bl	800056c <LL_APB2_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM14_IRQn, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2013      	movs	r0, #19
 8000b12:	f7ff fb9b 	bl	800024c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM14_IRQn);
 8000b16:	2013      	movs	r0, #19
 8000b18:	f7ff fb7e 	bl	8000218 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 31999;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <MX_TIM14_Init+0x64>)
 8000b20:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 499;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	22f4      	movs	r2, #244	; 0xf4
 8000b2c:	32ff      	adds	r2, #255	; 0xff
 8000b2e:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <MX_TIM14_Init+0x68>)
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	f001 ff39 	bl	80029b4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM14);
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MX_TIM14_Init+0x68>)
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fbfd 	bl	8000344 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b006      	add	sp, #24
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	00007cff 	.word	0x00007cff
 8000b58:	40002000 	.word	0x40002000

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b62:	2330      	movs	r3, #48	; 0x30
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	0018      	movs	r0, r3
 8000b68:	2320      	movs	r3, #32
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f002 f8cb 	bl	8002d08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	2318      	movs	r3, #24
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	0018      	movs	r0, r3
 8000b78:	2318      	movs	r3, #24
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f002 f8c3 	bl	8002d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b82:	003b      	movs	r3, r7
 8000b84:	0018      	movs	r0, r3
 8000b86:	2318      	movs	r3, #24
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 f8bc 	bl	8002d08 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fb10 	bl	80021c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000ba8:	f000 fb40 	bl	800122c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	01db      	lsls	r3, r3, #7
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fcdb 	bl	800056c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fcee 	bl	8000598 <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000bbc:	2118      	movs	r1, #24
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2202      	movs	r2, #2
 8000bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	187a      	adds	r2, r7, r1
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fcc8 	bl	8002582 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	201b      	movs	r0, #27
 8000bf6:	f7ff fb29 	bl	800024c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000bfa:	201b      	movs	r0, #27
 8000bfc:	f7ff fb0c 	bl	8000218 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c00:	2130      	movs	r1, #48	; 0x30
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2296      	movs	r2, #150	; 0x96
 8000c0c:	01d2      	lsls	r2, r2, #7
 8000c0e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	220c      	movs	r2, #12
 8000c26:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c32:	0019      	movs	r1, r3
 8000c34:	0010      	movs	r0, r2
 8000c36:	f001 ffd1 	bl	8002bdc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fbba 	bl	80003b8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fbd9 	bl	8000400 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fba1 	bl	8000398 <LL_USART_DisableFIFO>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fbf7 	bl	800044c <LL_USART_ConfigHalfDuplexMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fb8b 	bl	800037c <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fc0c 	bl	8000488 <LL_USART_IsActiveFlag_TEACK>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d0f9      	beq.n	8000c68 <MX_USART1_UART_Init+0x10c>
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x130>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fc1a 	bl	80004b0 <LL_USART_IsActiveFlag_REACK>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d0f3      	beq.n	8000c68 <MX_USART1_UART_Init+0x10c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b014      	add	sp, #80	; 0x50
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	003b      	movs	r3, r7
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2318      	movs	r3, #24
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f002 f832 	bl	8002d08 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f7ff fc77 	bl	8000598 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000caa:	2004      	movs	r0, #4
 8000cac:	f7ff fc74 	bl	8000598 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fc71 	bl	8000598 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED10_GPIO_Port, LED10_Pin);
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4afe      	ldr	r2, [pc, #1016]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f7ff fc48 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_CW_GPIO_Port, LED_CW_Pin);
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	4afb      	ldr	r2, [pc, #1004]	; (80010b8 <MX_GPIO_Init+0x428>)
 8000cca:	0019      	movs	r1, r3
 8000ccc:	0010      	movs	r0, r2
 8000cce:	f7ff fc41 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LINK_GPIO_Port, LINK_Pin);
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	4af8      	ldr	r2, [pc, #992]	; (80010b8 <MX_GPIO_Init+0x428>)
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0010      	movs	r0, r2
 8000cdc:	f7ff fc3a 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND1_GPIO_Port, BAND1_Pin);
 8000ce0:	23a0      	movs	r3, #160	; 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fc34 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND2_GPIO_Port, BAND2_Pin);
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fc2e 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND3_GPIO_Port, BAND3_Pin);
 8000cf8:	23a0      	movs	r3, #160	; 0xa0
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fc28 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND4_GPIO_Port, BAND4_Pin);
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2108      	movs	r1, #8
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fc22 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND5_GPIO_Port, BAND5_Pin);
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	2110      	movs	r1, #16
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fc1c 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND6_GPIO_Port, BAND6_Pin);
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2120      	movs	r1, #32
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fc16 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND7_GPIO_Port, BAND7_Pin);
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fc10 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND8_GPIO_Port, BAND8_Pin);
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fc0a 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND9_GPIO_Port, BAND9_Pin);
 8000d40:	4bdc      	ldr	r3, [pc, #880]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fc05 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAND10_GPIO_Port, BAND10_Pin);
 8000d4a:	4bda      	ldr	r3, [pc, #872]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fc00 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT_CW_GPIO_Port, OUT_CW_Pin);
 8000d54:	4bd7      	ldr	r3, [pc, #860]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000d56:	2104      	movs	r1, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fbfb 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OUT_SSB_GPIO_Port, OUT_SSB_Pin);
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	005a      	lsls	r2, r3, #1
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fbf3 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	011a      	lsls	r2, r3, #4
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fbeb 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	015a      	lsls	r2, r3, #5
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fbe3 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	021a      	lsls	r2, r3, #8
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fbdb 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8000d9e:	4bc5      	ldr	r3, [pc, #788]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000da0:	2108      	movs	r1, #8
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fbd6 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8000da8:	4bc2      	ldr	r3, [pc, #776]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000daa:	2110      	movs	r1, #16
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fbd1 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 8000db2:	4bc0      	ldr	r3, [pc, #768]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000db4:	2120      	movs	r1, #32
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fbcc 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 8000dbc:	4bbd      	ldr	r3, [pc, #756]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff fbc7 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED8_GPIO_Port, LED8_Pin);
 8000dc6:	4bbb      	ldr	r3, [pc, #748]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fbc2 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED9_GPIO_Port, LED9_Pin);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4ab7      	ldr	r2, [pc, #732]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0010      	movs	r0, r2
 8000dda:	f7ff fbbb 	bl	8000554 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED10_Pin;
 8000dde:	003b      	movs	r3, r7
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2201      	movs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dec:	003b      	movs	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED10_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	003b      	movs	r3, r7
 8000e00:	4aac      	ldr	r2, [pc, #688]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000e02:	0019      	movs	r1, r3
 8000e04:	0010      	movs	r0, r2
 8000e06:	f001 fbbc 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_CW_Pin;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	01d2      	lsls	r2, r2, #7
 8000e10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2201      	movs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_CW_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	4aa2      	ldr	r2, [pc, #648]	; (80010b8 <MX_GPIO_Init+0x428>)
 8000e2e:	0019      	movs	r1, r3
 8000e30:	0010      	movs	r0, r2
 8000e32:	f001 fba6 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LINK_Pin;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0212      	lsls	r2, r2, #8
 8000e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LINK_GPIO_Port, &GPIO_InitStruct);
 8000e56:	003b      	movs	r3, r7
 8000e58:	4a97      	ldr	r2, [pc, #604]	; (80010b8 <MX_GPIO_Init+0x428>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f001 fb90 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND1_Pin;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND1_GPIO_Port, &GPIO_InitStruct);
 8000e80:	003a      	movs	r2, r7
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fb7a 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND2_Pin;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND2_GPIO_Port, &GPIO_InitStruct);
 8000eac:	003a      	movs	r2, r7
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fb64 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND3_Pin;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND3_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	003a      	movs	r2, r7
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fb4e 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND4_Pin;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2208      	movs	r2, #8
 8000eea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eec:	003b      	movs	r3, r7
 8000eee:	2201      	movs	r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef8:	003b      	movs	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efe:	003b      	movs	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND4_GPIO_Port, &GPIO_InitStruct);
 8000f04:	003a      	movs	r2, r7
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fb38 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND5_Pin;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2210      	movs	r2, #16
 8000f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f18:	003b      	movs	r3, r7
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND5_GPIO_Port, &GPIO_InitStruct);
 8000f30:	003a      	movs	r2, r7
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 fb22 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND6_Pin;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2220      	movs	r2, #32
 8000f42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2201      	movs	r2, #1
 8000f48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fb0c 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND7_Pin;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2201      	movs	r2, #1
 8000f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND7_GPIO_Port, &GPIO_InitStruct);
 8000f88:	003a      	movs	r2, r7
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 faf6 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND8_Pin;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa8:	003b      	movs	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	003a      	movs	r2, r7
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 fae0 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND9_Pin;
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fc8:	003b      	movs	r3, r7
 8000fca:	2201      	movs	r2, #1
 8000fcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND9_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <MX_GPIO_Init+0x424>)
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	0010      	movs	r0, r2
 8000fe8:	f001 facb 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAND10_Pin;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2202      	movs	r2, #2
 8000ff0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BAND10_GPIO_Port, &GPIO_InitStruct);
 800100a:	003b      	movs	r3, r7
 800100c:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x424>)
 800100e:	0019      	movs	r1, r3
 8001010:	0010      	movs	r0, r2
 8001012:	f001 fab6 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT_CW_Pin;
 8001016:	003b      	movs	r3, r7
 8001018:	2204      	movs	r2, #4
 800101a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800101c:	003b      	movs	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001022:	003b      	movs	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001028:	003b      	movs	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT_CW_GPIO_Port, &GPIO_InitStruct);
 8001034:	003b      	movs	r3, r7
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <MX_GPIO_Init+0x424>)
 8001038:	0019      	movs	r1, r3
 800103a:	0010      	movs	r0, r2
 800103c:	f001 faa1 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT_SSB_Pin;
 8001040:	003b      	movs	r3, r7
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0052      	lsls	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001048:	003b      	movs	r3, r7
 800104a:	2201      	movs	r2, #1
 800104c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001054:	003b      	movs	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800105a:	003b      	movs	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(OUT_SSB_GPIO_Port, &GPIO_InitStruct);
 8001060:	003a      	movs	r2, r7
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa8a 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_STOP_Pin;
 800106e:	003b      	movs	r3, r7
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001074:	003b      	movs	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800107a:	003b      	movs	r3, r7
 800107c:	2201      	movs	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 8001080:	003b      	movs	r3, r7
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <MX_GPIO_Init+0x428>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f001 fa7b 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 800108c:	003b      	movs	r3, r7
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001094:	003b      	movs	r3, r7
 8001096:	2201      	movs	r2, #1
 8001098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800109a:	003b      	movs	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a0:	003b      	movs	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a6:	003b      	movs	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ac:	003a      	movs	r2, r7
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	e003      	b.n	80010bc <MX_GPIO_Init+0x42c>
 80010b4:	50000400 	.word	0x50000400
 80010b8:	50000800 	.word	0x50000800
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f001 fa5f 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80010c4:	003b      	movs	r3, r7
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0152      	lsls	r2, r2, #5
 80010ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010cc:	003b      	movs	r3, r7
 80010ce:	2201      	movs	r2, #1
 80010d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010d2:	003b      	movs	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d8:	003b      	movs	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010de:	003b      	movs	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80010e4:	003a      	movs	r2, r7
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 fa48 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 80010f2:	003b      	movs	r3, r7
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	0212      	lsls	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010fa:	003b      	movs	r3, r7
 80010fc:	2201      	movs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001100:	003b      	movs	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001106:	003b      	movs	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110c:	003b      	movs	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001112:	003a      	movs	r2, r7
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fa31 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001120:	003b      	movs	r3, r7
 8001122:	2208      	movs	r2, #8
 8001124:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001126:	003b      	movs	r3, r7
 8001128:	2201      	movs	r2, #1
 800112a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800112c:	003b      	movs	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001132:	003b      	movs	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001138:	003b      	movs	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800113e:	003b      	movs	r3, r7
 8001140:	4a39      	ldr	r2, [pc, #228]	; (8001228 <MX_GPIO_Init+0x598>)
 8001142:	0019      	movs	r1, r3
 8001144:	0010      	movs	r0, r2
 8001146:	f001 fa1c 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 800114a:	003b      	movs	r3, r7
 800114c:	2210      	movs	r2, #16
 800114e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001150:	003b      	movs	r3, r7
 8001152:	2201      	movs	r2, #1
 8001154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001156:	003b      	movs	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115c:	003b      	movs	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001162:	003b      	movs	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8001168:	003b      	movs	r3, r7
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <MX_GPIO_Init+0x598>)
 800116c:	0019      	movs	r1, r3
 800116e:	0010      	movs	r0, r2
 8001170:	f001 fa07 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 8001174:	003b      	movs	r3, r7
 8001176:	2220      	movs	r2, #32
 8001178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800117a:	003b      	movs	r3, r7
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001180:	003b      	movs	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001186:	003b      	movs	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118c:	003b      	movs	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001192:	003b      	movs	r3, r7
 8001194:	4a24      	ldr	r2, [pc, #144]	; (8001228 <MX_GPIO_Init+0x598>)
 8001196:	0019      	movs	r1, r3
 8001198:	0010      	movs	r0, r2
 800119a:	f001 f9f2 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 800119e:	003b      	movs	r3, r7
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a4:	003b      	movs	r3, r7
 80011a6:	2201      	movs	r2, #1
 80011a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011aa:	003b      	movs	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b0:	003b      	movs	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b6:	003b      	movs	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 80011bc:	003b      	movs	r3, r7
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <MX_GPIO_Init+0x598>)
 80011c0:	0019      	movs	r1, r3
 80011c2:	0010      	movs	r0, r2
 80011c4:	f001 f9dd 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED8_Pin;
 80011c8:	003b      	movs	r3, r7
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ce:	003b      	movs	r3, r7
 80011d0:	2201      	movs	r2, #1
 80011d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011d4:	003b      	movs	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011da:	003b      	movs	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e0:	003b      	movs	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 80011e6:	003b      	movs	r3, r7
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_GPIO_Init+0x598>)
 80011ea:	0019      	movs	r1, r3
 80011ec:	0010      	movs	r0, r2
 80011ee:	f001 f9c8 	bl	8002582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED9_Pin;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011fa:	003b      	movs	r3, r7
 80011fc:	2201      	movs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001200:	003b      	movs	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800120c:	003b      	movs	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 8001212:	003b      	movs	r3, r7
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <MX_GPIO_Init+0x598>)
 8001216:	0019      	movs	r1, r3
 8001218:	0010      	movs	r0, r2
 800121a:	f001 f9b2 	bl	8002582 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b006      	add	sp, #24
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	50000400 	.word	0x50000400

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2201      	movs	r2, #1
 8001250:	4013      	ands	r3, r2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0549      	lsls	r1, r1, #21
 8001260:	430a      	orrs	r2, r1
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_MspInit+0x44>)
 8001266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	4013      	ands	r3, r2
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40021000 	.word	0x40021000

08001280 <LL_TIM_ClearFlag_UPDATE>:
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	4252      	negs	r2, r2
 800128e:	611a      	str	r2, [r3, #16]
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2220      	movs	r2, #32
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d101      	bne.n	80012d2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4013      	ands	r3, r2
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	400b      	ands	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bd80      	pop	{r7, pc}

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f994 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM14)) {
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <TIM14_IRQHandler+0x2c>)
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff9e 	bl	8001298 <LL_TIM_IsActiveFlag_UPDATE>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d00a      	beq.n	8001376 <TIM14_IRQHandler+0x26>
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <TIM14_IRQHandler+0x2c>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff ff8c 	bl	8001280 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_TogglePin(LINK_GPIO_Port, LINK_Pin);
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <TIM14_IRQHandler+0x30>)
 800136e:	0019      	movs	r1, r3
 8001370:	0010      	movs	r0, r2
 8001372:	f7ff ffbe 	bl	80012f2 <LL_GPIO_TogglePin>

  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40002000 	.word	0x40002000
 8001380:	50000800 	.word	0x50000800

08001384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void) {
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t letter;
	static uint8_t i = 0;
	if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800138a:	4b67      	ldr	r3, [pc, #412]	; (8001528 <USART1_IRQHandler+0x1a4>)
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ff94 	bl	80012ba <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d100      	bne.n	8001398 <USART1_IRQHandler+0x14>
 8001396:	e0c2      	b.n	800151e <USART1_IRQHandler+0x19a>
		letter = LL_USART_ReceiveData8(USART1);
 8001398:	1dfc      	adds	r4, r7, #7
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <USART1_IRQHandler+0x1a4>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff9d 	bl	80012dc <LL_USART_ReceiveData8>
 80013a2:	0003      	movs	r3, r0
 80013a4:	7023      	strb	r3, [r4, #0]
		if (letter != 0xFD) {
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2bfd      	cmp	r3, #253	; 0xfd
 80013ac:	d015      	beq.n	80013da <USART1_IRQHandler+0x56>
			TRXData[i] = letter;
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0019      	movs	r1, r3
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	545a      	strb	r2, [r3, r1]
			i++;
 80013bc:	4b5b      	ldr	r3, [pc, #364]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013c6:	701a      	strb	r2, [r3, #0]
			if (i == 15)
 80013c8:	4b58      	ldr	r3, [pc, #352]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d000      	beq.n	80013d2 <USART1_IRQHandler+0x4e>
 80013d0:	e0a5      	b.n	800151e <USART1_IRQHandler+0x19a>
				i = 0;
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80013d8:	e0a1      	b.n	800151e <USART1_IRQHandler+0x19a>
			TRXData[i] = 0xFD;
 80013da:	4b54      	ldr	r3, [pc, #336]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	001a      	movs	r2, r3
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80013e2:	21fd      	movs	r1, #253	; 0xfd
 80013e4:	5499      	strb	r1, [r3, r2]
			i = 0;
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <USART1_IRQHandler+0x1a8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
			if ((TRXData[0] == 0xFE) && (TRXData[1] == 0xFE)
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2bfe      	cmp	r3, #254	; 0xfe
 80013f2:	d000      	beq.n	80013f6 <USART1_IRQHandler+0x72>
 80013f4:	e065      	b.n	80014c2 <USART1_IRQHandler+0x13e>
 80013f6:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	2bfe      	cmp	r3, #254	; 0xfe
 80013fc:	d000      	beq.n	8001400 <USART1_IRQHandler+0x7c>
 80013fe:	e060      	b.n	80014c2 <USART1_IRQHandler+0x13e>
					&& ((TRXData[4] == 0x00)||(TRXData[4] == 0x03))) {
 8001400:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001402:	791b      	ldrb	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <USART1_IRQHandler+0x8c>
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800140a:	791b      	ldrb	r3, [r3, #4]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d158      	bne.n	80014c2 <USART1_IRQHandler+0x13e>
				if ((TRXData[8] == 0x01) || (TRXData[8] == 0x02))
 8001410:	4b47      	ldr	r3, [pc, #284]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001412:	7a1b      	ldrb	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d003      	beq.n	8001420 <USART1_IRQHandler+0x9c>
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800141a:	7a1b      	ldrb	r3, [r3, #8]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d102      	bne.n	8001426 <USART1_IRQHandler+0xa2>
					flag_band = 160; //160m 1000-2999 kHz
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001422:	22a0      	movs	r2, #160	; 0xa0
 8001424:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x03) || (TRXData[8] == 0x04))
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001428:	7a1b      	ldrb	r3, [r3, #8]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d003      	beq.n	8001436 <USART1_IRQHandler+0xb2>
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001430:	7a1b      	ldrb	r3, [r3, #8]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d102      	bne.n	800143c <USART1_IRQHandler+0xb8>
					flag_band = 80; //80m 3000-4999 kHz
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001438:	2250      	movs	r2, #80	; 0x50
 800143a:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x05))
 800143c:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800143e:	7a1b      	ldrb	r3, [r3, #8]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d102      	bne.n	800144a <USART1_IRQHandler+0xc6>
					flag_band = 60; //60m 5000-5999 kHz
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001446:	223c      	movs	r2, #60	; 0x3c
 8001448:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x07))
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	2b07      	cmp	r3, #7
 8001450:	d102      	bne.n	8001458 <USART1_IRQHandler+0xd4>
					flag_band = 40; //40m 7000-7999 kHz
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001454:	2228      	movs	r2, #40	; 0x28
 8001456:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x10))
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2b10      	cmp	r3, #16
 800145e:	d102      	bne.n	8001466 <USART1_IRQHandler+0xe2>
					flag_band = 30; //30m 10000-10999 kHz
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001462:	221e      	movs	r2, #30
 8001464:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x14))
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001468:	7a1b      	ldrb	r3, [r3, #8]
 800146a:	2b14      	cmp	r3, #20
 800146c:	d102      	bne.n	8001474 <USART1_IRQHandler+0xf0>
					flag_band = 20; //20m 14000-14999 kHz
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <USART1_IRQHandler+0x1b0>)
 8001470:	2214      	movs	r2, #20
 8001472:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x18))
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001476:	7a1b      	ldrb	r3, [r3, #8]
 8001478:	2b18      	cmp	r3, #24
 800147a:	d102      	bne.n	8001482 <USART1_IRQHandler+0xfe>
					flag_band = 17; //17m 18000-18999 kHz
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <USART1_IRQHandler+0x1b0>)
 800147e:	2211      	movs	r2, #17
 8001480:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x21))
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001484:	7a1b      	ldrb	r3, [r3, #8]
 8001486:	2b21      	cmp	r3, #33	; 0x21
 8001488:	d102      	bne.n	8001490 <USART1_IRQHandler+0x10c>
					flag_band = 15; //15m 21000-21999 kHz
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <USART1_IRQHandler+0x1b0>)
 800148c:	220f      	movs	r2, #15
 800148e:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x24))
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001492:	7a1b      	ldrb	r3, [r3, #8]
 8001494:	2b24      	cmp	r3, #36	; 0x24
 8001496:	d102      	bne.n	800149e <USART1_IRQHandler+0x11a>
					flag_band = 12; //12m 24000-24999 kHz
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <USART1_IRQHandler+0x1b0>)
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x28) || (TRXData[8] == 0x29))
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014a0:	7a1b      	ldrb	r3, [r3, #8]
 80014a2:	2b28      	cmp	r3, #40	; 0x28
 80014a4:	d003      	beq.n	80014ae <USART1_IRQHandler+0x12a>
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	2b29      	cmp	r3, #41	; 0x29
 80014ac:	d102      	bne.n	80014b4 <USART1_IRQHandler+0x130>
					flag_band = 10; //10m 28000-29999 kHz
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <USART1_IRQHandler+0x1b0>)
 80014b0:	220a      	movs	r2, #10
 80014b2:	601a      	str	r2, [r3, #0]
				if ((TRXData[8] == 0x050))
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	2b50      	cmp	r3, #80	; 0x50
 80014ba:	d102      	bne.n	80014c2 <USART1_IRQHandler+0x13e>
					flag_band = 6; //6m 50000-50999 kHz
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <USART1_IRQHandler+0x1b0>)
 80014be:	2206      	movs	r2, #6
 80014c0:	601a      	str	r2, [r3, #0]
			if ((TRXData[0] == 0xFE) && (TRXData[1] == 0xFE)
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2bfe      	cmp	r3, #254	; 0xfe
 80014c8:	d129      	bne.n	800151e <USART1_IRQHandler+0x19a>
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	2bfe      	cmp	r3, #254	; 0xfe
 80014d0:	d125      	bne.n	800151e <USART1_IRQHandler+0x19a>
					&& ((TRXData[4] == 0x01)||(TRXData[4] == 0x04))) {
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d003      	beq.n	80014e2 <USART1_IRQHandler+0x15e>
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d11d      	bne.n	800151e <USART1_IRQHandler+0x19a>
				if ((TRXData[5] == 0x03))
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d102      	bne.n	80014f0 <USART1_IRQHandler+0x16c>
					flag_mode = 'C';		//CW
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <USART1_IRQHandler+0x1b4>)
 80014ec:	2243      	movs	r2, #67	; 0x43
 80014ee:	701a      	strb	r2, [r3, #0]
				if ((TRXData[5] == 0x00) || (TRXData[5] == 0x01)
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014f2:	795b      	ldrb	r3, [r3, #5]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00f      	beq.n	8001518 <USART1_IRQHandler+0x194>
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <USART1_IRQHandler+0x1ac>)
 80014fa:	795b      	ldrb	r3, [r3, #5]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00b      	beq.n	8001518 <USART1_IRQHandler+0x194>
						|| (TRXData[5] == 0x02) || (TRXData[5] == 0x05)
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001502:	795b      	ldrb	r3, [r3, #5]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d007      	beq.n	8001518 <USART1_IRQHandler+0x194>
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <USART1_IRQHandler+0x1ac>)
 800150a:	795b      	ldrb	r3, [r3, #5]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d003      	beq.n	8001518 <USART1_IRQHandler+0x194>
						|| (TRXData[5] == 0x06))
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <USART1_IRQHandler+0x1ac>)
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d102      	bne.n	800151e <USART1_IRQHandler+0x19a>
					flag_mode = 'P';		//Phone
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <USART1_IRQHandler+0x1b4>)
 800151a:	2250      	movs	r2, #80	; 0x50
 800151c:	701a      	strb	r2, [r3, #0]
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b003      	add	sp, #12
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40013800 	.word	0x40013800
 800152c:	2000003d 	.word	0x2000003d
 8001530:	20000028 	.word	0x20000028
 8001534:	20000038 	.word	0x20000038
 8001538:	2000003c 	.word	0x2000003c

0800153c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800154a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800154c:	f7ff fff6 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <LoopForever+0x6>)
  ldr r1, =_edata
 8001552:	490d      	ldr	r1, [pc, #52]	; (8001588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <LoopForever+0xe>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001568:	4c0a      	ldr	r4, [pc, #40]	; (8001594 <LoopForever+0x16>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001576:	f001 fbcf 	bl	8002d18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800157a:	f7ff fa2f 	bl	80009dc <main>

0800157e <LoopForever>:

LoopForever:
  b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
  ldr   r0, =_estack
 8001580:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800158c:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8001590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001594:	20000044 	.word	0x20000044

08001598 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_IRQHandler>
	...

0800159c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x3c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Init+0x3c>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b6:	2003      	movs	r0, #3
 80015b8:	f000 f810 	bl	80015dc <HAL_InitTick>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d003      	beq.n	80015c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e001      	b.n	80015cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fe36 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_InitTick+0x88>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d02b      	beq.n	800164c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_InitTick+0x8c>)
 80015f6:	681c      	ldr	r4, [r3, #0]
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_InitTick+0x88>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	0019      	movs	r1, r3
 80015fe:	23fa      	movs	r3, #250	; 0xfa
 8001600:	0098      	lsls	r0, r3, #2
 8001602:	f7fe fd7d 	bl	8000100 <__udivsi3>
 8001606:	0003      	movs	r3, r0
 8001608:	0019      	movs	r1, r3
 800160a:	0020      	movs	r0, r4
 800160c:	f7fe fd78 	bl	8000100 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f8ef 	bl	80017f6 <HAL_SYSTICK_Config>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d112      	bne.n	8001642 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d80a      	bhi.n	8001638 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	2301      	movs	r3, #1
 8001626:	425b      	negs	r3, r3
 8001628:	2200      	movs	r2, #0
 800162a:	0018      	movs	r0, r3
 800162c:	f000 f8ce 	bl	80017cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_InitTick+0x90>)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00d      	b.n	8001654 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e008      	b.n	8001654 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001642:	230f      	movs	r3, #15
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e003      	b.n	8001654 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800164c:	230f      	movs	r3, #15
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001654:	230f      	movs	r3, #15
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	781b      	ldrb	r3, [r3, #0]
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b005      	add	sp, #20
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000008 	.word	0x20000008
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	001a      	movs	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	18d2      	adds	r2, r2, r3
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_IncTick+0x20>)
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	20000008 	.word	0x20000008
 8001690:	20000040 	.word	0x20000040

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	20000040 	.word	0x20000040

080016a8 <__NVIC_SetPriority>:
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	0002      	movs	r2, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b7f      	cmp	r3, #127	; 0x7f
 80016bc:	d828      	bhi.n	8001710 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016be:	4a2f      	ldr	r2, [pc, #188]	; (800177c <__NVIC_SetPriority+0xd4>)
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	33c0      	adds	r3, #192	; 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	589b      	ldr	r3, [r3, r2]
 80016ce:	1dfa      	adds	r2, r7, #7
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	0011      	movs	r1, r2
 80016d4:	2203      	movs	r2, #3
 80016d6:	400a      	ands	r2, r1
 80016d8:	00d2      	lsls	r2, r2, #3
 80016da:	21ff      	movs	r1, #255	; 0xff
 80016dc:	4091      	lsls	r1, r2
 80016de:	000a      	movs	r2, r1
 80016e0:	43d2      	mvns	r2, r2
 80016e2:	401a      	ands	r2, r3
 80016e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	019b      	lsls	r3, r3, #6
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	401a      	ands	r2, r3
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	0018      	movs	r0, r3
 80016f4:	2303      	movs	r3, #3
 80016f6:	4003      	ands	r3, r0
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fc:	481f      	ldr	r0, [pc, #124]	; (800177c <__NVIC_SetPriority+0xd4>)
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	430a      	orrs	r2, r1
 8001708:	33c0      	adds	r3, #192	; 0xc0
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	501a      	str	r2, [r3, r0]
}
 800170e:	e031      	b.n	8001774 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <__NVIC_SetPriority+0xd8>)
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0019      	movs	r1, r3
 8001718:	230f      	movs	r3, #15
 800171a:	400b      	ands	r3, r1
 800171c:	3b08      	subs	r3, #8
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3306      	adds	r3, #6
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	3304      	adds	r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1dfa      	adds	r2, r7, #7
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	0011      	movs	r1, r2
 8001730:	2203      	movs	r2, #3
 8001732:	400a      	ands	r2, r1
 8001734:	00d2      	lsls	r2, r2, #3
 8001736:	21ff      	movs	r1, #255	; 0xff
 8001738:	4091      	lsls	r1, r2
 800173a:	000a      	movs	r2, r1
 800173c:	43d2      	mvns	r2, r2
 800173e:	401a      	ands	r2, r3
 8001740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	401a      	ands	r2, r3
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	0018      	movs	r0, r3
 8001750:	2303      	movs	r3, #3
 8001752:	4003      	ands	r3, r0
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <__NVIC_SetPriority+0xd8>)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	001c      	movs	r4, r3
 8001760:	230f      	movs	r3, #15
 8001762:	4023      	ands	r3, r4
 8001764:	3b08      	subs	r3, #8
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	430a      	orrs	r2, r1
 800176a:	3306      	adds	r3, #6
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	18c3      	adds	r3, r0, r3
 8001770:	3304      	adds	r3, #4
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b003      	add	sp, #12
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1e5a      	subs	r2, r3, #1
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	045b      	lsls	r3, r3, #17
 8001794:	429a      	cmp	r2, r3
 8001796:	d301      	bcc.n	800179c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001798:	2301      	movs	r3, #1
 800179a:	e010      	b.n	80017be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <SysTick_Config+0x44>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	3a01      	subs	r2, #1
 80017a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a4:	2301      	movs	r3, #1
 80017a6:	425b      	negs	r3, r3
 80017a8:	2103      	movs	r1, #3
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff ff7c 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x44>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x44>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	210f      	movs	r1, #15
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	1c02      	adds	r2, r0, #0
 80017dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	0011      	movs	r1, r2
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff ffbf 	bl	8001784 <SysTick_Config>
 8001806:	0003      	movs	r3, r0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d11f      	bne.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	0013      	movs	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	189b      	adds	r3, r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4912      	ldr	r1, [pc, #72]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001842:	0018      	movs	r0, r3
 8001844:	f7fe fc5c 	bl	8000100 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800184e:	e008      	b.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3b01      	subs	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e001      	b.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e009      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	401a      	ands	r2, r3
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	429a      	cmp	r2, r3
 8001872:	d0ed      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40007000 	.word	0x40007000
 8001884:	fffff9ff 	.word	0xfffff9ff
 8001888:	20000000 	.word	0x20000000
 800188c:	000f4240 	.word	0x000f4240

08001890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e2f3      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	d100      	bne.n	80018ae <HAL_RCC_OscConfig+0x1e>
 80018ac:	e07c      	b.n	80019a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4bc3      	ldr	r3, [pc, #780]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2238      	movs	r2, #56	; 0x38
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b8:	4bc0      	ldr	r3, [pc, #768]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2203      	movs	r2, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b10      	cmp	r3, #16
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4bb9      	ldr	r3, [pc, #740]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d062      	beq.n	80019a6 <HAL_RCC_OscConfig+0x116>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d15e      	bne.n	80019a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e2ce      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x78>
 80018f8:	4bb0      	ldr	r3, [pc, #704]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4baf      	ldr	r3, [pc, #700]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e020      	b.n	800194a <HAL_RCC_OscConfig+0xba>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	02db      	lsls	r3, r3, #11
 8001910:	429a      	cmp	r2, r3
 8001912:	d10e      	bne.n	8001932 <HAL_RCC_OscConfig+0xa2>
 8001914:	4ba9      	ldr	r3, [pc, #676]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4ba8      	ldr	r3, [pc, #672]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	02c9      	lsls	r1, r1, #11
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	4ba6      	ldr	r3, [pc, #664]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4ba5      	ldr	r3, [pc, #660]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0249      	lsls	r1, r1, #9
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0xba>
 8001932:	4ba2      	ldr	r3, [pc, #648]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4ba1      	ldr	r3, [pc, #644]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001938:	49a1      	ldr	r1, [pc, #644]	; (8001bc0 <HAL_RCC_OscConfig+0x330>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	4b9f      	ldr	r3, [pc, #636]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b9e      	ldr	r3, [pc, #632]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001944:	499f      	ldr	r1, [pc, #636]	; (8001bc4 <HAL_RCC_OscConfig+0x334>)
 8001946:	400a      	ands	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d014      	beq.n	800197c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fe9f 	bl	8001694 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fe9a 	bl	8001694 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e28d      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196e:	4b93      	ldr	r3, [pc, #588]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	029b      	lsls	r3, r3, #10
 8001976:	4013      	ands	r3, r2
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xcc>
 800197a:	e015      	b.n	80019a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fe8a 	bl	8001694 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001986:	f7ff fe85 	bl	8001694 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e278      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001998:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	4013      	ands	r3, r2
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0xf6>
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d100      	bne.n	80019b4 <HAL_RCC_OscConfig+0x124>
 80019b2:	e099      	b.n	8001ae8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2238      	movs	r2, #56	; 0x38
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2203      	movs	r2, #3
 80019c4:	4013      	ands	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0x144>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d002      	beq.n	80019da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d135      	bne.n	8001a46 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019da:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x162>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e24b      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a74      	ldr	r2, [pc, #464]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	021a      	lsls	r2, r3, #8
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a0e:	4b6b      	ldr	r3, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x33c>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0adb      	lsrs	r3, r3, #11
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	4a68      	ldr	r2, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x340>)
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x344>)
 8001a32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x348>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff fdcf 	bl	80015dc <HAL_InitTick>
 8001a3e:	1e03      	subs	r3, r0, #0
 8001a40:	d051      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e221      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d030      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x33c>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0049      	lsls	r1, r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fe10 	bl	8001694 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fe0b 	bl	8001694 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1fe      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	021a      	lsls	r2, r3, #8
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e01b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	4949      	ldr	r1, [pc, #292]	; (8001bdc <HAL_RCC_OscConfig+0x34c>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fdea 	bl	8001694 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fde5 	bl	8001694 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1d8      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x236>
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2208      	movs	r2, #8
 8001aee:	4013      	ands	r3, r2
 8001af0:	d047      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2238      	movs	r2, #56	; 0x38
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b18      	cmp	r3, #24
 8001afc:	d10a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d03c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d138      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e1ba      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d019      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fdb4 	bl	8001694 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff fdaf 	bl	8001694 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1a2      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f1      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2a2>
 8001b4e:	e018      	b.n	8001b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fd9a 	bl	8001694 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fd95 	bl	8001694 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e188      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f1      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2204      	movs	r2, #4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2fe>
 8001b8c:	e0c6      	b.n	8001d1c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	231f      	movs	r3, #31
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2238      	movs	r2, #56	; 0x38
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d11e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d100      	bne.n	8001bae <HAL_RCC_OscConfig+0x31e>
 8001bac:	e0b6      	b.n	8001d1c <HAL_RCC_OscConfig+0x48c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d000      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x328>
 8001bb6:	e0b1      	b.n	8001d1c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e166      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	fffeffff 	.word	0xfffeffff
 8001bc4:	fffbffff 	.word	0xfffbffff
 8001bc8:	ffff80ff 	.word	0xffff80ff
 8001bcc:	ffffc7ff 	.word	0xffffc7ff
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be0:	4bac      	ldr	r3, [pc, #688]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	055b      	lsls	r3, r3, #21
 8001be8:	4013      	ands	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x360>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x362>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d011      	beq.n	8001c1a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bfa:	4ba6      	ldr	r3, [pc, #664]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0549      	lsls	r1, r1, #21
 8001c00:	430a      	orrs	r2, r1
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c04:	4ba3      	ldr	r3, [pc, #652]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c12:	231f      	movs	r3, #31
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1a:	4b9f      	ldr	r3, [pc, #636]	; (8001e98 <HAL_RCC_OscConfig+0x608>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d11a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c26:	4b9c      	ldr	r3, [pc, #624]	; (8001e98 <HAL_RCC_OscConfig+0x608>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <HAL_RCC_OscConfig+0x608>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0049      	lsls	r1, r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fd2e 	bl	8001694 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff fd29 	bl	8001694 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e11c      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x608>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3e2>
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c68:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x404>
 8001c7a:	4b86      	ldr	r3, [pc, #536]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c80:	2104      	movs	r1, #4
 8001c82:	430a      	orrs	r2, r1
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c86:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
 8001c94:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c98:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca4:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	438a      	bics	r2, r1
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d014      	beq.n	8001cde <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fcee 	bl	8001694 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fce9 	bl	8001694 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a74      	ldr	r2, [pc, #464]	; (8001e9c <HAL_RCC_OscConfig+0x60c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0db      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x42e>
 8001cdc:	e013      	b.n	8001d06 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fcd9 	bl	8001694 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce6:	e009      	b.n	8001cfc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fcd4 	bl	8001694 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x60c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0c6      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfc:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d06:	231f      	movs	r3, #31
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d14:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d16:	4962      	ldr	r1, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x610>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x496>
 8001d24:	e0b0      	b.n	8001e88 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2238      	movs	r2, #56	; 0x38
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d100      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4a4>
 8001d32:	e078      	b.n	8001e26 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d153      	bne.n	8001de4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d42:	4958      	ldr	r1, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x614>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fca4 	bl	8001694 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff fc9f 	bl	8001694 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e092      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	049b      	lsls	r3, r3, #18
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d70:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_RCC_OscConfig+0x618>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	431a      	orrs	r2, r3
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0449      	lsls	r1, r1, #17
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dac:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0549      	lsls	r1, r1, #21
 8001db6:	430a      	orrs	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc6b 	bl	8001694 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fc66 	bl	8001694 <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e059      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	049b      	lsls	r3, r3, #18
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x534>
 8001de2:	e051      	b.n	8001e88 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001dea:	492e      	ldr	r1, [pc, #184]	; (8001ea4 <HAL_RCC_OscConfig+0x614>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc50 	bl	8001694 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff fc4b 	bl	8001694 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e03e      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	049b      	lsls	r3, r3, #18
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001e1e:	4923      	ldr	r1, [pc, #140]	; (8001eac <HAL_RCC_OscConfig+0x61c>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	e030      	b.n	8001e88 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e02b      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_RCC_OscConfig+0x604>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2270      	movs	r2, #112	; 0x70
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d117      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	23fe      	movs	r3, #254	; 0xfe
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	23f8      	movs	r3, #248	; 0xf8
 8001e6a:	039b      	lsls	r3, r3, #14
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	0f5b      	lsrs	r3, r3, #29
 8001e7a:	075a      	lsls	r2, r3, #29
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b008      	add	sp, #32
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	00001388 	.word	0x00001388
 8001ea0:	efffffff 	.word	0xefffffff
 8001ea4:	feffffff 	.word	0xfeffffff
 8001ea8:	1fc1808c 	.word	0x1fc1808c
 8001eac:	effefffc 	.word	0xeffefffc

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0e9      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	4013      	ands	r3, r2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d91e      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff fbd6 	bl	8001694 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eee:	f7ff fbd1 	bl	8001694 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0ca      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ee      	bne.n	8001eee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d006      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	21e0      	movs	r1, #224	; 0xe0
 8001f2c:	01c9      	lsls	r1, r1, #7
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <HAL_RCC_ClockConfig+0x1fc>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d057      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d12b      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e097      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d11f      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e08b      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	d113      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e07f      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e074      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e06d      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fb60 	bl	8001694 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7ff fb5b 	bl	8001694 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e054      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2238      	movs	r2, #56	; 0x38
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2207      	movs	r2, #7
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d21e      	bcs.n	800204c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2207      	movs	r2, #7
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002020:	f7ff fb38 	bl	8001694 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002028:	e009      	b.n	800203e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7ff fb33 	bl	8001694 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e02c      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_RCC_ClockConfig+0x200>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800206a:	f000 f829 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800206e:	0001      	movs	r1, r0
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	220f      	movs	r2, #15
 8002078:	401a      	ands	r2, r3
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x204>)
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	58d3      	ldr	r3, [r2, r3]
 8002080:	221f      	movs	r2, #31
 8002082:	4013      	ands	r3, r2
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x208>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x20c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff faa3 	bl	80015dc <HAL_InitTick>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	40021000 	.word	0x40021000
 80020ac:	fffff0ff 	.word	0xfffff0ff
 80020b0:	ffff8fff 	.word	0xffff8fff
 80020b4:	08002dd0 	.word	0x08002dd0
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	; 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	2207      	movs	r2, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	4835      	ldr	r0, [pc, #212]	; (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e6:	f7fe f80b 	bl	8000100 <__udivsi3>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e05d      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2238      	movs	r2, #56	; 0x38
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e054      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	; 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	2b10      	cmp	r3, #16
 800210c:	d138      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	4824      	ldr	r0, [pc, #144]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002130:	f7fd ffe6 	bl	8000100 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	0019      	movs	r1, r3
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	227f      	movs	r2, #127	; 0x7f
 8002140:	4013      	ands	r3, r2
 8002142:	434b      	muls	r3, r1
 8002144:	617b      	str	r3, [r7, #20]
        break;
 8002146:	e00d      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	481c      	ldr	r0, [pc, #112]	; (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800214c:	f7fd ffd8 	bl	8000100 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	0019      	movs	r1, r3
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	227f      	movs	r2, #127	; 0x7f
 800215c:	4013      	ands	r3, r2
 800215e:	434b      	muls	r3, r1
 8002160:	617b      	str	r3, [r7, #20]
        break;
 8002162:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0f5b      	lsrs	r3, r3, #29
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f7fd ffc3 	bl	8000100 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e015      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	; 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	2b20      	cmp	r3, #32
 800218a:	d103      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2238      	movs	r2, #56	; 0x38
 800219a:	4013      	ands	r3, r2
 800219c:	2b18      	cmp	r3, #24
 800219e:	d103      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e001      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021cc:	2313      	movs	r3, #19
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d4:	2312      	movs	r3, #18
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d100      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021e8:	e0a3      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2011      	movs	r0, #17
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	055b      	lsls	r3, r3, #21
 80021fa:	4013      	ands	r3, r2
 80021fc:	d110      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0549      	lsls	r1, r1, #21
 8002208:	430a      	orrs	r2, r1
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
 800220c:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800220e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	055b      	lsls	r3, r3, #21
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	183b      	adds	r3, r7, r0
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002220:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0049      	lsls	r1, r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800222e:	f7ff fa31 	bl	8001694 <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002236:	e00b      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7ff fa2c 	bl	8001694 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d904      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002246:	2313      	movs	r3, #19
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2203      	movs	r2, #3
 800224c:	701a      	strb	r2, [r3, #0]
        break;
 800224e:	e005      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d0ed      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800225c:	2313      	movs	r3, #19
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d154      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002266:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4013      	ands	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d019      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d014      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002288:	4013      	ands	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800228e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0249      	lsls	r1, r1, #9
 8002296:	430a      	orrs	r2, r1
 8002298:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800229c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022a0:	4956      	ldr	r1, [pc, #344]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a6:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d016      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff f9ee 	bl	8001694 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022bc:	e00c      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff f9e9 	bl	8001694 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d904      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022ce:	2313      	movs	r3, #19
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2203      	movs	r2, #3
 80022d4:	701a      	strb	r2, [r3, #0]
            break;
 80022d6:	e004      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d0ed      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022e2:	2313      	movs	r3, #19
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002300:	e00c      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002302:	2312      	movs	r3, #18
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2213      	movs	r2, #19
 8002308:	18ba      	adds	r2, r7, r2
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e005      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	2312      	movs	r3, #18
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2213      	movs	r2, #19
 8002316:	18ba      	adds	r2, r7, r2
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800231c:	2311      	movs	r3, #17
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800232e:	400a      	ands	r2, r1
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2203      	movs	r2, #3
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800234c:	430a      	orrs	r2, r1
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	4013      	ands	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	01db      	lsls	r3, r3, #7
 8002376:	4013      	ands	r3, r2
 8002378:	d015      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	0899      	lsrs	r1, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	05db      	lsls	r3, r3, #23
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d016      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	01db      	lsls	r3, r3, #7
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023e0:	2312      	movs	r3, #18
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b006      	add	sp, #24
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	fffffcff 	.word	0xfffffcff
 80023fc:	fffeffff 	.word	0xfffeffff
 8002400:	00001388 	.word	0x00001388
 8002404:	efffffff 	.word	0xefffffff
 8002408:	ffffcfff 	.word	0xffffcfff
 800240c:	ffff3fff 	.word	0xffff3fff

08002410 <LL_GPIO_SetPinMode>:
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	435b      	muls	r3, r3
 8002424:	001a      	movs	r2, r3
 8002426:	0013      	movs	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	189b      	adds	r3, r3, r2
 800242c:	43db      	mvns	r3, r3
 800242e:	400b      	ands	r3, r1
 8002430:	001a      	movs	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	435b      	muls	r3, r3
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	434b      	muls	r3, r1
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}

08002448 <LL_GPIO_SetPinOutputType>:
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	43d2      	mvns	r2, r2
 800245c:	401a      	ands	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	434b      	muls	r3, r1
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}

08002472 <LL_GPIO_SetPinSpeed>:
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	435b      	muls	r3, r3
 8002486:	001a      	movs	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	189b      	adds	r3, r3, r2
 800248e:	43db      	mvns	r3, r3
 8002490:	400b      	ands	r3, r1
 8002492:	001a      	movs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	435b      	muls	r3, r3
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	434b      	muls	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	609a      	str	r2, [r3, #8]
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_GPIO_SetPinPull>:
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	435b      	muls	r3, r3
 80024be:	001a      	movs	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	43db      	mvns	r3, r3
 80024c8:	400b      	ands	r3, r1
 80024ca:	001a      	movs	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	435b      	muls	r3, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	434b      	muls	r3, r1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	60da      	str	r2, [r3, #12]
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <LL_GPIO_SetAFPin_0_7>:
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a19      	ldr	r1, [r3, #32]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	435b      	muls	r3, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4353      	muls	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	435a      	muls	r2, r3
 80024fe:	0013      	movs	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	43db      	mvns	r3, r3
 8002506:	400b      	ands	r3, r1
 8002508:	001a      	movs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	435b      	muls	r3, r3
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	434b      	muls	r3, r1
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	434b      	muls	r3, r1
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	434b      	muls	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}

08002528 <LL_GPIO_SetAFPin_8_15>:
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	0a12      	lsrs	r2, r2, #8
 8002540:	4353      	muls	r3, r2
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	0a12      	lsrs	r2, r2, #8
 8002546:	4353      	muls	r3, r2
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	0a12      	lsrs	r2, r2, #8
 800254c:	435a      	muls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	43db      	mvns	r3, r3
 8002556:	400b      	ands	r3, r1
 8002558:	001a      	movs	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	0a09      	lsrs	r1, r1, #8
 8002562:	434b      	muls	r3, r1
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	0a09      	lsrs	r1, r1, #8
 8002568:	434b      	muls	r3, r1
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	0a09      	lsrs	r1, r1, #8
 800256e:	434b      	muls	r3, r1
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	434b      	muls	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}

08002582 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002590:	e047      	b.n	8002622 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4091      	lsls	r1, r2
 800259c:	000a      	movs	r2, r1
 800259e:	4013      	ands	r3, r2
 80025a0:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d039      	beq.n	800261c <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d003      	beq.n	80025b8 <LL_GPIO_Init+0x36>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d10d      	bne.n	80025d4 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff ff56 	bl	8002472 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff ff3a 	bl	8002448 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff64 	bl	80024aa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d111      	bne.n	800260e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	d807      	bhi.n	8002600 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff ff72 	bl	80024e2 <LL_GPIO_SetAFPin_0_7>
 80025fe:	e006      	b.n	800260e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff8d 	bl	8002528 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff fefa 	bl	8002410 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	40da      	lsrs	r2, r3
 800262a:	1e13      	subs	r3, r2, #0
 800262c:	d1b1      	bne.n	8002592 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}

08002638 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <LL_RCC_HSI_IsReady+0x24>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	401a      	ands	r2, r3
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	429a      	cmp	r2, r3
 800264c:	d101      	bne.n	8002652 <LL_RCC_HSI_IsReady+0x1a>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_RCC_HSI_IsReady+0x1c>
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40021000 	.word	0x40021000

08002660 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <LL_RCC_LSE_IsReady+0x1c>)
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2202      	movs	r2, #2
 800266a:	4013      	ands	r3, r2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d101      	bne.n	8002674 <LL_RCC_LSE_IsReady+0x14>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <LL_RCC_LSE_IsReady+0x16>
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000

08002680 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <LL_RCC_GetSysClkSource+0x14>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2238      	movs	r2, #56	; 0x38
 800268a:	4013      	ands	r3, r2
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000

08002698 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <LL_RCC_GetAHBPrescaler+0x14>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	23f0      	movs	r3, #240	; 0xf0
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4013      	ands	r3, r2
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	23e0      	movs	r3, #224	; 0xe0
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	4013      	ands	r3, r2
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <LL_RCC_GetUSARTClockSource+0x20>)
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	4313      	orrs	r3, r2
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000

080026ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <LL_RCC_PLL_GetN+0x14>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	227f      	movs	r2, #127	; 0x7f
 80026f8:	4013      	ands	r3, r2
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <LL_RCC_PLL_GetR+0x14>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0f5b      	lsrs	r3, r3, #29
 800270e:	075b      	lsls	r3, r3, #29
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40021000 	.word	0x40021000

0800271c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <LL_RCC_PLL_GetMainSource+0x14>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2203      	movs	r2, #3
 8002726:	4013      	ands	r3, r2
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40021000 	.word	0x40021000

08002734 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <LL_RCC_PLL_GetDivider+0x14>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2270      	movs	r2, #112	; 0x70
 800273e:	4013      	ands	r3, r2
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000

0800274c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002754:	f000 f866 	bl	8002824 <RCC_GetSystemClockFreq>
 8002758:	0002      	movs	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f88c 	bl	8002880 <RCC_GetHCLKClockFreq>
 8002768:	0002      	movs	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f89c 	bl	80028b0 <RCC_GetPCLK1ClockFreq>
 8002778:	0002      	movs	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d137      	bne.n	800280a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff ff93 	bl	80026c8 <LL_RCC_GetUSARTClockSource>
 80027a2:	0003      	movs	r3, r0
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <LL_RCC_GetUSARTClockFreq+0x8c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d016      	beq.n	80027d8 <LL_RCC_GetUSARTClockFreq+0x50>
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <LL_RCC_GetUSARTClockFreq+0x8c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d81c      	bhi.n	80027ea <LL_RCC_GetUSARTClockFreq+0x62>
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <LL_RCC_GetUSARTClockFreq+0x90>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <LL_RCC_GetUSARTClockFreq+0x36>
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <LL_RCC_GetUSARTClockFreq+0x94>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d005      	beq.n	80027c8 <LL_RCC_GetUSARTClockFreq+0x40>
 80027bc:	e015      	b.n	80027ea <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80027be:	f000 f831 	bl	8002824 <RCC_GetSystemClockFreq>
 80027c2:	0003      	movs	r3, r0
 80027c4:	60fb      	str	r3, [r7, #12]
        break;
 80027c6:	e020      	b.n	800280a <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80027c8:	f7ff ff36 	bl	8002638 <LL_RCC_HSI_IsReady>
 80027cc:	0003      	movs	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d118      	bne.n	8002804 <LL_RCC_GetUSARTClockFreq+0x7c>
        {
          usart_frequency = HSI_VALUE;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <LL_RCC_GetUSARTClockFreq+0x98>)
 80027d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027d6:	e015      	b.n	8002804 <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80027d8:	f7ff ff42 	bl	8002660 <LL_RCC_LSE_IsReady>
 80027dc:	0003      	movs	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d112      	bne.n	8002808 <LL_RCC_GetUSARTClockFreq+0x80>
        {
          usart_frequency = LSE_VALUE;
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027e8:	e00e      	b.n	8002808 <LL_RCC_GetUSARTClockFreq+0x80>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027ea:	f000 f81b 	bl	8002824 <RCC_GetSystemClockFreq>
 80027ee:	0003      	movs	r3, r0
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f845 	bl	8002880 <RCC_GetHCLKClockFreq>
 80027f6:	0003      	movs	r3, r0
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f859 	bl	80028b0 <RCC_GetPCLK1ClockFreq>
 80027fe:	0003      	movs	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]
        break;
 8002802:	e002      	b.n	800280a <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	e000      	b.n	800280a <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8002808:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00030003 	.word	0x00030003
 8002818:	00030001 	.word	0x00030001
 800281c:	00030002 	.word	0x00030002
 8002820:	00f42400 	.word	0x00f42400

08002824 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800282a:	f7ff ff29 	bl	8002680 <LL_RCC_GetSysClkSource>
 800282e:	0003      	movs	r3, r0
 8002830:	2b08      	cmp	r3, #8
 8002832:	d002      	beq.n	800283a <RCC_GetSystemClockFreq+0x16>
 8002834:	2b10      	cmp	r3, #16
 8002836:	d003      	beq.n	8002840 <RCC_GetSystemClockFreq+0x1c>
 8002838:	e007      	b.n	800284a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <RCC_GetSystemClockFreq+0x50>)
 800283c:	607b      	str	r3, [r7, #4]
      break;
 800283e:	e014      	b.n	800286a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002840:	f000 f84c 	bl	80028dc <RCC_PLL_GetFreqDomain_SYS>
 8002844:	0003      	movs	r3, r0
 8002846:	607b      	str	r3, [r7, #4]
      break;
 8002848:	e00f      	b.n	800286a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <RCC_GetSystemClockFreq+0x54>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	2207      	movs	r2, #7
 8002852:	4013      	ands	r3, r2
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	0013      	movs	r3, r2
 800285a:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	4807      	ldr	r0, [pc, #28]	; (800287c <RCC_GetSystemClockFreq+0x58>)
 8002860:	f7fd fc4e 	bl	8000100 <__udivsi3>
 8002864:	0003      	movs	r3, r0
 8002866:	607b      	str	r3, [r7, #4]
      break;
 8002868:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}
 8002874:	007a1200 	.word	0x007a1200
 8002878:	40021000 	.word	0x40021000
 800287c:	00f42400 	.word	0x00f42400

08002880 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002888:	f7ff ff06 	bl	8002698 <LL_RCC_GetAHBPrescaler>
 800288c:	0003      	movs	r3, r0
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	220f      	movs	r2, #15
 8002892:	401a      	ands	r2, r3
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <RCC_GetHCLKClockFreq+0x2c>)
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	58d3      	ldr	r3, [r2, r3]
 800289a:	221f      	movs	r2, #31
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	40da      	lsrs	r2, r3
 80028a2:	0013      	movs	r3, r2
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	08002dd0 	.word	0x08002dd0

080028b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80028b8:	f7ff fefa 	bl	80026b0 <LL_RCC_GetAPB1Prescaler>
 80028bc:	0003      	movs	r3, r0
 80028be:	0b1a      	lsrs	r2, r3, #12
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <RCC_GetPCLK1ClockFreq+0x28>)
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	58d3      	ldr	r3, [r2, r3]
 80028c6:	221f      	movs	r2, #31
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	40da      	lsrs	r2, r3
 80028ce:	0013      	movs	r3, r2
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08002e10 	.word	0x08002e10

080028dc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80028e2:	f7ff ff1b 	bl	800271c <LL_RCC_PLL_GetMainSource>
 80028e6:	0003      	movs	r3, r0
 80028e8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d003      	beq.n	80028fe <RCC_PLL_GetFreqDomain_SYS+0x22>
 80028f6:	e005      	b.n	8002904 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80028fa:	607b      	str	r3, [r7, #4]
      break;
 80028fc:	e005      	b.n	800290a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002900:	607b      	str	r3, [r7, #4]
      break;
 8002902:	e002      	b.n	800290a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002906:	607b      	str	r3, [r7, #4]
      break;
 8002908:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800290a:	f7ff feef 	bl	80026ec <LL_RCC_PLL_GetN>
 800290e:	0002      	movs	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4353      	muls	r3, r2
 8002914:	001c      	movs	r4, r3
 8002916:	f7ff ff0d 	bl	8002734 <LL_RCC_PLL_GetDivider>
 800291a:	0003      	movs	r3, r0
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	3301      	adds	r3, #1
 8002920:	0019      	movs	r1, r3
 8002922:	0020      	movs	r0, r4
 8002924:	f7fd fbec 	bl	8000100 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	001c      	movs	r4, r3
 800292c:	f7ff feea 	bl	8002704 <LL_RCC_PLL_GetR>
 8002930:	0003      	movs	r3, r0
 8002932:	0f5b      	lsrs	r3, r3, #29
 8002934:	3301      	adds	r3, #1
 8002936:	0019      	movs	r1, r3
 8002938:	0020      	movs	r0, r4
 800293a:	f7fd fbe1 	bl	8000100 <__udivsi3>
 800293e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b003      	add	sp, #12
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <LL_TIM_SetPrescaler>:
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <LL_TIM_SetAutoReload>:
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <LL_TIM_SetRepetitionCounter>:
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}

08002998 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	2201      	movs	r2, #1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	615a      	str	r2, [r3, #20]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a2c      	ldr	r2, [pc, #176]	; (8002a78 <LL_TIM_Init+0xc4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <LL_TIM_Init+0x20>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <LL_TIM_Init+0xc8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d107      	bne.n	80029e4 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2270      	movs	r2, #112	; 0x70
 80029d8:	4393      	bics	r3, r2
 80029da:	001a      	movs	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <LL_TIM_Init+0xc4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00f      	beq.n	8002a0c <LL_TIM_Init+0x58>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <LL_TIM_Init+0xc8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <LL_TIM_Init+0x58>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <LL_TIM_Init+0xcc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <LL_TIM_Init+0x58>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <LL_TIM_Init+0xd0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <LL_TIM_Init+0x58>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <LL_TIM_Init+0xd4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d106      	bne.n	8002a1a <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <LL_TIM_Init+0xd8>)
 8002a10:	401a      	ands	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0011      	movs	r1, r2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff ff9d 	bl	8002968 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	001a      	movs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff89 	bl	8002950 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <LL_TIM_Init+0xc4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <LL_TIM_Init+0xa2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <LL_TIM_Init+0xd0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <LL_TIM_Init+0xa2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <LL_TIM_Init+0xd4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d106      	bne.n	8002a64 <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff8e 	bl	8002980 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff ff96 	bl	8002998 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40002000 	.word	0x40002000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffffcff 	.word	0xfffffcff

08002a90 <LL_USART_IsEnabled>:
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <LL_USART_IsEnabled+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_USART_IsEnabled+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <LL_USART_SetPrescaler>:
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <LL_USART_SetStopBitsLength>:
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <LL_USART_SetStopBitsLength+0x24>)
 8002ae8:	401a      	ands	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	605a      	str	r2, [r3, #4]
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b002      	add	sp, #8
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	ffffcfff 	.word	0xffffcfff

08002b00 <LL_USART_SetHWFlowCtrl>:
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <LL_USART_SetHWFlowCtrl+0x24>)
 8002b10:	401a      	ands	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	fffffcff 	.word	0xfffffcff

08002b28 <LL_USART_SetBaudRate>:
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0b      	cmp	r3, #11
 8002b3a:	d846      	bhi.n	8002bca <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d043      	beq.n	8002bca <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d126      	bne.n	8002b9a <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	001a      	movs	r2, r3
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <LL_USART_SetBaudRate+0xac>)
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	58d3      	ldr	r3, [r2, r3]
 8002b58:	0019      	movs	r1, r3
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f7fd fad0 	bl	8000100 <__udivsi3>
 8002b60:	0003      	movs	r3, r0
 8002b62:	005a      	lsls	r2, r3, #1
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	18d3      	adds	r3, r2, r3
 8002b6a:	6a39      	ldr	r1, [r7, #32]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fd fac7 	bl	8000100 <__udivsi3>
 8002b72:	0003      	movs	r3, r0
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <LL_USART_SetBaudRate+0xb0>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	001a      	movs	r2, r3
 8002b88:	2307      	movs	r3, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	e017      	b.n	8002bca <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <LL_USART_SetBaudRate+0xac>)
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	58d3      	ldr	r3, [r2, r3]
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f7fd faa9 	bl	8000100 <__udivsi3>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7fd faa0 	bl	8000100 <__udivsi3>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	60da      	str	r2, [r3, #12]
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b006      	add	sp, #24
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	08002e30 	.word	0x08002e30
 8002bd8:	0000fff0 	.word	0x0000fff0

08002bdc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002be6:	231f      	movs	r3, #31
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ff4b 	bl	8002a90 <LL_USART_IsEnabled>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d153      	bne.n	8002ca6 <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <LL_USART_Init+0xd8>)
 8002c04:	401a      	ands	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4319      	orrs	r1, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	4319      	orrs	r1, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0011      	movs	r1, r2
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff ff54 	bl	8002ad8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff ff61 	bl	8002b00 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <LL_USART_Init+0xdc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d105      	bne.n	8002c52 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002c46:	2003      	movs	r0, #3
 8002c48:	f7ff fd9e 	bl	8002788 <LL_RCC_GetUSARTClockFreq>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	e00b      	b.n	8002c6a <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <LL_USART_Init+0xe0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d107      	bne.n	8002c6a <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002c5a:	240c      	movs	r4, #12
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff fd74 	bl	800274c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00f      	beq.n	8002c98 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002c78:	231f      	movs	r3, #31
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	0023      	movs	r3, r4
 8002c94:	f7ff ff48 	bl	8002b28 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ff06 	bl	8002ab2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b009      	add	sp, #36	; 0x24
 8002cb2:	bd90      	pop	{r4, r7, pc}
 8002cb4:	efff69f3 	.word	0xefff69f3
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <LL_mDelay+0x44>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002cce:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	d00c      	beq.n	8002cf4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e008      	b.n	8002cf4 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <LL_mDelay+0x44>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	025b      	lsls	r3, r3, #9
 8002cea:	4013      	ands	r3, r2
 8002cec:	d002      	beq.n	8002cf4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f3      	bne.n	8002ce2 <LL_mDelay+0x22>
    }
  }
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b004      	add	sp, #16
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <memset>:
 8002d08:	0003      	movs	r3, r0
 8002d0a:	1882      	adds	r2, r0, r2
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	7019      	strb	r1, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	4c0c      	ldr	r4, [pc, #48]	; (8002d50 <__libc_init_array+0x38>)
 8002d1e:	4d0d      	ldr	r5, [pc, #52]	; (8002d54 <__libc_init_array+0x3c>)
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	42a6      	cmp	r6, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	2600      	movs	r6, #0
 8002d2a:	f000 f819 	bl	8002d60 <_init>
 8002d2e:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x40>)
 8002d30:	4d0a      	ldr	r5, [pc, #40]	; (8002d5c <__libc_init_array+0x44>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	42a6      	cmp	r6, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	00b3      	lsls	r3, r6, #2
 8002d3e:	58eb      	ldr	r3, [r5, r3]
 8002d40:	4798      	blx	r3
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	00b3      	lsls	r3, r6, #2
 8002d48:	58eb      	ldr	r3, [r5, r3]
 8002d4a:	4798      	blx	r3
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	08002e60 	.word	0x08002e60
 8002d54:	08002e60 	.word	0x08002e60
 8002d58:	08002e64 	.word	0x08002e64
 8002d5c:	08002e60 	.word	0x08002e60

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
